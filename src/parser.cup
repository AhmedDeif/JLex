import java.io.*;
import java_cup.runtime.*;

/*
parser code {:
:};*/
	
/* Terminals (tokens returned by the scanner). */
terminal IDENTIFIER, BREAK, DEFAULT, FUNC, CASE, STRUCT, ELSE,
					PACKAGE, SWITCH, CONST, IF, TYPE, FOR, IMPORT, RETURN, VAR,
					OR_OP, AND_OP, REL_OP, INT_LIT, PLUS, MINUS,
					OPEN_PARAN, CLOSE_PARAN, OPEN_CURLY, CLOSE_CURLY, OPEN_SQUARE,
					CLOSE_SQUARE, SEMI_COLON, COMMA, DOT, COLON,
					EQUAL, CDOTS, ASTRISK, SHIFT_LEFT, SHIFT_RIGHT, BAR, SLASH,
					EXCLAMATION, LESS_DASH, AMBERSAND, PERCENT ,INCREMENT, STRING_LIT,COLON_EQUAL, DECREMENT;		

/* Non-terminals */
nonterminal	binary_op, ADD_OP, mul_op, unary_op, var_spec_helper, zero_or_one_equal_expression,type, type_name,
type_lit, array_type, struct_type, function_type, slice_type, array_length, element_type,
expression, struct_type_temp, field_decl, field_decl_helper, anonymous_field,zero_or_one_element_list,
field_decl_helper2, tag, signature, parameters, result_helper, result,
parameter_list, parameter_declaration, parameter_declaration_helper, identifier_list,
parameter_declaration2, method_name, block, statement_list, statement_list_helper, statement,
declaration, const_decl, type_decl, top_level_decl, method_decl, zero_or_one_semicolon, 
const_decl_helper, const_spec, zero_or_more_const_spec, const_spec_helper,
zero_or_one_const_spec_helper, zero_or_more_comma_identifier, expression_list,
zero_or_more_comma_expression, type_spec, var_decl, var_spec, short_var_decl,
function_decl, function_name, function, function_body, receiver, operand, literal, composite_lit,
literal_type, literal_value, element_list, keyed_element, key, field_name, element,
basic_lit, operand_name, qualified_ident, function_lit, primary_expr, selector, index, slice, arguments,
method_expr, receiver_type, simple_stmt, expression_stmt, inc_dec_stmt,
assignment, assign_op, if_stmt, switch_stmt, expr_switch_stmt, expr_case_clause, expr_switch_case, for_stmt,
condition, for_clause, init_stmt, post_stmt,return_stmt, break_stmt, source_file, package_clause, package_name,
import_decl, import_spec,  parameter_list_helper,var_dec_helper,zero_or_more_var_spec_semicolon ,
zero_or_more_type_spec_semicolon,unary_expression,import_path, type_decl_helper,function_decl_helper,
method_decl_helper,zero_or_one_init_stmt,zero_or_one_post_stmt,
zero_or_one_expression_list, zero_or_one_semi_colon, zero_or_more_top_level_decl, zero_or_more_import_decl,
zero_or_more_expr_case_clause,zero_or_one_for_stmt_helper
,for_stmt_helper,import_decl_helper,zero_or_more_import_spec,zero_or_one_import_spec_helper,import_spec_helper,
zero_or_one_else,if_group,zero_or_more_op,plus_or_minus,zero_or_one_arg,
zero_or_one_expr,zero_or_more_keyed,zero_or_one_square;

precedence left SEMI_COLON;
precedence left COMMA;
precedence left OPEN_PARAN;
precedence left REL_OP, AND_OP, OR_OP;
precedence left PLUS, MINUS, BAR;
precedence left ASTRISK, PERCENT, SLASH, SHIFT_LEFT, SHIFT_RIGHT, AMBERSAND;

start with source_file;

/* The grammar */
binary_op ::= OR_OP{::}|AND_OP{::}|REL_OP{::}|ADD_OP{::}|mul_op{::};	  
ADD_OP ::= PLUS{::}|MINUS{::}|BAR{::};
mul_op ::= ASTRISK{::}|SLASH{::}|PERCENT{::}|SHIFT_LEFT{::}|SHIFT_RIGHT{::}|AMBERSAND{::};
unary_op ::= PLUS{::}|MINUS{::}|EXCLAMATION{::}|ASTRISK{::}|AMBERSAND{::}|LESS_DASH{::};
type ::= type_name{::}|type_lit{::};
type_name ::= IDENTIFIER{::};
type_lit ::= array_type{::}|struct_type{::}|function_type{::}|slice_type{::};
array_type ::= OPEN_SQUARE array_length CLOSE_SQUARE element_type{::};
array_length ::= expression{::};
element_type ::= type{::};
slice_type ::= OPEN_SQUARE CLOSE_SQUARE element_type{::};
struct_type ::= STRUCT OPEN_CURLY struct_type_temp CLOSE_CURLY{::};
struct_type_temp ::= field_decl SEMI_COLON struct_type_temp{::} | {::};
field_decl ::= field_decl_helper field_decl_helper2 {::};
field_decl_helper ::= identifier_list type {::}|anonymous_field{::};
field_decl_helper2 ::= tag {::} | {::};
anonymous_field ::= ASTRISK type_name{::} | type_name{::};
tag ::= STRING_LIT {::};
function_type ::= FUNC signature{::};
signature ::=  parameters result_helper {::};
result_helper ::= result {::} | {::};
result ::= parameters{::} | OPEN_PARAN type CLOSE_PARAN {::};
parameters ::= OPEN_PARAN parameter_list_helper CLOSE_PARAN{::};
parameter_list_helper ::= parameter_list {::} | {::};
parameter_list ::= parameter_declaration parameter_declaration_helper {::};
parameter_declaration_helper ::= COMMA parameter_declaration parameter_declaration_helper{::} | {::};
parameter_declaration ::= identifier_list parameter_declaration2 type {::};
parameter_declaration2 ::= CDOTS{::} | {::};
method_name ::= IDENTIFIER{::};
block ::= OPEN_CURLY statement_list CLOSE_CURLY{::};
statement_list ::= statement_list_helper{::};
statement_list_helper ::= statement statement_list_helper{::} | {::};
declaration ::= const_decl SEMI_COLON{::} | type_decl {::}|type_decl SEMI_COLON{::} | var_decl SEMI_COLON{::};
zero_or_one_semicolon ::= SEMI_COLON {::} | {::};
top_level_decl ::= declaration{::} |  function_decl zero_or_one_semicolon {::}| method_decl zero_or_one_semicolon{::};
const_decl ::= CONST const_decl_helper{::};
const_decl_helper ::= const_spec{::} | OPEN_PARAN zero_or_more_const_spec CLOSE_PARAN{::};
zero_or_more_const_spec ::= const_spec SEMI_COLON zero_or_more_const_spec {::} | {::};
const_spec ::= IDENTIFIER zero_or_one_const_spec_helper{::};
const_spec_helper ::= type EQUAL expression{::} | EQUAL expression{::};
zero_or_one_const_spec_helper ::= const_spec_helper{::} | {::};
identifier_list ::= IDENTIFIER zero_or_more_comma_identifier{::};
zero_or_more_comma_identifier ::= COMMA IDENTIFIER zero_or_more_comma_identifier{::} | {::};
expression_list ::= expression zero_or_more_comma_expression{::};
zero_or_more_comma_expression ::= COMMA expression zero_or_more_comma_expression {::} | {::};
expression ::= unary_expression {::} | expression binary_op expression {::};
unary_expression ::= primary_expr{::} | unary_op unary_expression{::};
type_decl ::= TYPE type_decl_helper{::};
type_decl_helper ::= type_spec {::}| OPEN_PARAN zero_or_more_type_spec_semicolon CLOSE_PARAN {::};
zero_or_more_type_spec_semicolon ::= type_spec SEMI_COLON zero_or_more_type_spec_semicolon{::} | {::};
type_spec ::= IDENTIFIER type {::};
var_decl ::= VAR var_dec_helper {::};
var_dec_helper ::= var_spec {::} | OPEN_PARAN zero_or_more_var_spec_semicolon CLOSE_PARAN {::};
zero_or_more_var_spec_semicolon ::= var_spec SEMI_COLON zero_or_more_var_spec_semicolon {::} | {::};
var_spec ::= IDENTIFIER var_spec_helper {::};
var_spec_helper ::= type zero_or_one_equal_expression {::} | EQUAL expression {::};
zero_or_one_equal_expression ::= EQUAL expression {::} | {::};
short_var_decl ::= identifier_list COLON_EQUAL expression {::};
function_decl ::= FUNC function_name function_decl_helper {::};
function_decl_helper ::= function{::} | signature {::};
function_name ::= IDENTIFIER {::};
function ::= signature function_body {::};
function_body ::= block{::};
method_decl ::= FUNC receiver method_name method_decl_helper{::};
method_decl_helper ::= function{::} | signature {::};
receiver ::= parameters{::};
operand ::= literal {::} | operand_name {::} | method_expr {::}| OPEN_PARAN expression CLOSE_PARAN {::};
literal ::= basic_lit {::} | composite_lit {::} | function_lit {::};
composite_lit ::= literal_type literal_value {::};
literal_type ::= struct_type {::} | array_type {::} | OPEN_SQUARE CDOTS CLOSE_SQUARE element_type {::}| slice_type {::}| TYPE type_name{::};
literal_value ::= OPEN_CURLY zero_or_one_element_list CLOSE_CURLY {::};
zero_or_one_element_list ::= element_list {::} | {::};





zero_or_more_expr_case_clause ::= expr_case_clause zero_or_more_expr_case_clause {::}| {::};



expr_case_clause ::= expr_switch_case COLON statement_list {::};
expr_switch_case ::= CASE expression_list {::} | DEFAULT{::};
for_stmt ::= FOR zero_or_one_for_stmt_helper block{::};
zero_or_one_for_stmt_helper ::= for_stmt_helper {::} | {::};
for_stmt_helper ::= condition {::} | for_clause {::};
condition ::= expression {::};
for_clause ::= zero_or_one_init_stmt SEMI_COLON zero_or_one_post_stmt SEMI_COLON zero_or_one_post_stmt{::};
zero_or_one_init_stmt ::= init_stmt {::} |{::};
zero_or_one_post_stmt ::= post_stmt{::} | {::};
init_stmt ::= simple_stmt{::};
post_stmt ::= simple_stmt{::};
return_stmt ::= RETURN zero_or_one_expression_list {::};
zero_or_one_expression_list ::= expression_list {::} | {::};
break_stmt ::= BREAK{::};
source_file ::= package_clause zero_or_one_semi_colon zero_or_more_import_decl zero_or_more_top_level_decl{::};
zero_or_one_semi_colon ::= SEMI_COLON{::} | {::};
zero_or_more_import_decl ::= import_decl zero_or_one_semi_colon zero_or_more_import_decl {::} | {::};
zero_or_more_top_level_decl ::= top_level_decl zero_or_more_top_level_decl {::} | {::};
package_clause ::= PACKAGE package_name {::};
package_name ::= IDENTIFIER {::};
import_decl ::= IMPORT import_decl_helper{::};
import_decl_helper ::= import_spec {::}| OPEN_PARAN zero_or_more_import_spec CLOSE_PARAN{::};
zero_or_more_import_spec ::= import_decl zero_or_one_semi_colon zero_or_more_import_spec{::} | {::};
import_spec ::= zero_or_one_import_spec_helper import_path{::};
zero_or_one_import_spec_helper ::= import_spec_helper {::} | {::};
import_spec_helper ::= DOT{::} | package_name{::};
import_path ::= STRING_LIT{::};




element_list ::= keyed_element zero_or_more_keyed{::};
zero_or_more_keyed ::= COMMA keyed_element zero_or_more_keyed{::} | {::};
keyed_element ::= key COLON element{::} | element{::};
key ::= field_name{::}|literal_value{::};
field_name ::= IDENTIFIER{::};
element ::= expression{::}|literal_value{::};
basic_lit ::= INT_LIT{::}|STRING_LIT{::};
operand_name ::= IDENTIFIER{::}|qualified_ident{::};
qualified_ident ::= DOT package_name DOT IDENTIFIER{::};
function_lit ::= FUNC function{::};
primary_expr ::= operand{::}|primary_expr selector{::}|primary_expr index{::}|primary_expr slice{::}|primary_expr arguments{::};
selector ::= DOT IDENTIFIER{::};
index ::= OPEN_SQUARE expression CLOSE_SQUARE{::};
slice ::= OPEN_SQUARE zero_or_one_expr COLON zero_or_one_expr CLOSE_SQUARE{::}|OPEN_SQUARE zero_or_one_square COLON expression COLON expression CLOSE_SQUARE{::};
zero_or_one_expr ::= expression{::}|{::};
arguments ::= OPEN_PARAN zero_or_one_arg CLOSE_PARAN{::};
zero_or_one_arg ::= type expression_list{::} | expression_list{::} |{::};

method_expr ::= DOT receiver_type DOT method_name{::};
receiver_type ::= OPEN_PARAN ASTRISK type_name CLOSE_PARAN{::}|OPEN_PARAN type_name CLOSE_PARAN{::};
statement ::= declaration{::}|simple_stmt SEMI_COLON{::}|return_stmt SEMI_COLON{::}|break_stmt SEMI_COLON{::}|block zero_or_one_semicolon{::}|if_stmt zero_or_one_semicolon{::}|switch_stmt zero_or_one_semicolon {::}|for_stmt zero_or_one_semicolon{::};
simple_stmt ::= expression_stmt{::}|inc_dec_stmt{::}|assignment{::}|short_var_decl{::};
expression_stmt ::= expression{::};
inc_dec_stmt ::= expression plus_or_minus{::};
plus_or_minus ::= INCREMENT{::}|DECREMENT{::};
assignment ::= expression_list assign_op expression_list{::};
assign_op ::= zero_or_more_op EQUAL{::};
zero_or_more_op ::= ADD_OP{::}| mul_op{::}|{::};
if_stmt ::= IF simple_stmt SEMI_COLON expression block zero_or_one_else{::} | IF simple_stmt SEMI_COLON{::} expression block zero_or_one_else{::};
zero_or_one_else ::= ELSE if_group{::};
if_group ::= if_stmt{::}|block{::};
switch_stmt ::= expr_switch_stmt{::};

expr_switch_stmt ::= SWITCH OPEN_CURLY zero_or_more_expr_case_clause CLOSE_CURLY {::}|
SWITCH expression OPEN_CURLY zero_or_more_expr_case_clause CLOSE_CURLY {::}|
SWITCH simple_stmt SEMI_COLON OPEN_CURLY zero_or_more_expr_case_clause CLOSE_CURLY {::}|
SWITCH simple_stmt SEMI_COLON expression OPEN_CURLY zero_or_more_expr_case_clause CLOSE_CURLY {::};



