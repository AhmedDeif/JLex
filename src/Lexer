import java.lang.System;
import java.io.*;
import java.util.Stack;

class Lexer {

	Yylex tokenizer;
	public  Lexer(String fileName) 
	{
	  try
	  {
	  tokenizer=new Yylex(new BufferedReader(new FileReader(fileName)));
	  }
	  catch(Exception e)
	  {
	  
	  }	 
	}
	public Token nextToken()
	{
		Token next=null;
		try
		{
		 next=  tokenizer.getToken();
		}
		catch(Exception e)
		{
		}
		return next;
	}
	}


%%


%function getToken
%type Token
%char
%line

%state OpenBracket



%{
	//initialize  variables to be used by class
	
	class bracketController {
		boolean curly = false;
		boolean bracket = false;
		public bracketController(boolean curly, boolean bracket) {
			this.curly = curly;
			this.bracket = bracket;
		}
	}
	
	int curlyBrackets = 0;
	int regularBrackets = 0;
	
	Stack<bracketController> bracketsStack = new Stack<bracketController>();
	
	
	
%}


%init{

//Add code to be executed on initialization of the lexer

%init}



newline = (\n)
unicode_letter = [a-zA-Z]
unicode_char = [^\n\`\"]
commentChars = (.)
letter = [{unicode_letter}"_"]
decimal_digit = [0-9]
keywords = "break"|"default"|"func"|"case"|"struct"|"else"|"package"|"switch"|"const"|"if"|"range"|"type"|"continue"|"for"|"import"|"return"|"var"
binary_op = {OR_OP} | {AND_OP} |  {REL_OP} | {AND_OP} | {mul_op}
OR_OP = "||"
AND_OP = "&&"
REL_OP =  "=="|"<"|"!="|"<="|">"|">="
AND_OP = "+"|"-"|"|"
mul_op = "*"|"/"|"%"|"<<"|">>"|"&"
INT_LIT = ({decimal_digit})+ | ([1-9]{decimal_digit}*)
escaped_char = \\("a"|"b"|"f"|"n"|"r"|"t"|"v"|\\|\'|\")
PERCENT = "%"
unicode_value = {escaped_char}|{unicode_char}|
raw_string_lit =  \`({unicode_char}+|{newline}+)\`
interpreted_string_lit = (\")({unicode_value})*(\")
STRING_LIT =  {interpreted_string_lit}|{raw_string_lit}
comment = //{commentChars}+
COLON_EQUAL = ":="
CONST = "const"
Import = "import"
FUNC = "func"
ELSE = "else"
IF = "if"
RETURN = "return"
Comma = ","
PLUS = "+"
AND_OP = "&&"
EQUAL = "="
SEMI_COLON = ";"
OPEN_PARAN = "("
CLOSE_PARAN = ")"
OPEN_CURLY = "{"
CLOSE_CURLY = "}"
DOT = "."
VAR = "var"
SLASH = "/"
escapeChars = " "
IDENTIFIER =   ({unicode_letter})+({decimal_digit})*({unicode_letter})*
PACKAGE = "package"
ASTRISK = "*"
MINUS = "-"
COLON = ":"
OPEN_SQUARE = "["
CLOSE_SQUARE = "]"
FOR = "for"
INCREMENT = "++"
CASE = "case"
SWITCH = "switch"
DEFAULT = "default"
TAB = "	"
TYPE = "type"
STRUCT = "struct"



%eofval{
//Add code to be executed when the end of the file is reached
	if(bracketsStack.isEmpty())
	{
		return (new Token(Token.EOF,"Done"));
	}
	if(bracketsStack.peek().bracket){
		return (new Token(Token.EOF,"There is some ( that is not closed"));
	}
	else {
		return (new Token(Token.EOF,"There is some { that is not closed"));
	}
  	
%eofval}


%% 

<YYINITIAL> {newline} {}
<YYINITIAL> {TYPE} { return (new Token(Token.TYPE,yytext()));}
<YYINITIAL> {STRUCT} { return (new Token(Token.STRUCT,yytext()));}
<YYINITIAL> {escapeChars} {}
<YYINITIAL> {TAB} {}
<YYINITIAL> {OPEN_PARAN} {  
	bracketController temp = new bracketController(false,true); 
	bracketsStack.push(temp);
	regularBrackets++; 
	return (new Token(Token.OPEN_PARAN,yytext()));
}
<YYINITIAL> {CLOSE_PARAN} {
	if(bracketsStack.isEmpty()){
		return (new Token(Token.ERROR,"Error: ) has no matching ( in line " + (yyline+1)));
	}
	else {
	
		if(bracketsStack.peek().bracket){
			bracketsStack.pop();
			regularBrackets--; 
			return (new Token(Token.CLOSE_PARAN,yytext()));
		}
		else {
		
		if(regularBrackets >= 1){
			//	I know that this bracket was open somewhere
			return (new Token(Token.ERROR,"You have a missing bracket in line " + (yyline+1)));
		}
			return (new Token(Token.ERROR,") has no matching ( in line " + (yyline+1)));
		}
	}
}
<YYINITIAL> {OPEN_CURLY} { 
	bracketController temp = new bracketController(true,false);
	bracketsStack.push(temp);
	 curlyBrackets++; 
	 return (new Token(Token.OPEN_CURLY,yytext()));
}
<YYINITIAL> {CLOSE_CURLY} {
	if(bracketsStack.isEmpty()){
		return (new Token(Token.ERROR,"Error: } has no matching { in line " + (yyline+1)));
	}
	else {
		if(bracketsStack.peek().curly){
			bracketsStack.pop();
			curlyBrackets--; 
			return (new Token(Token.CLOSE_CURLY,yytext()));
		}
		else {
				if(curlyBrackets >= 1){
					//	I know that this bracket was open somewhere
					return (new Token(Token.ERROR,"You have a missing bracket in line " + (yyline+1)));
				}
			return (new Token(Token.ERROR,"} has no matching { in line " + (yyline+1)));
		}
	}
}
<YYINITIAL> {PERCENT} { return (new Token(Token.PERCENT,yytext()));}
<YYINITIAL> {DOT} { return (new Token(Token.DOT,yytext()));}
<YYINITIAL> {CONST} { return (new Token(Token.CONST,yytext()));}
<YYINITIAL> {PACKAGE} { return (new Token(Token.PACKAGE,yytext()));}
<YYINITIAL> {Import} { return (new Token(Token.IMPORT,yytext()));}
<YYINITIAL> {FUNC} { return (new Token(Token.FUNC,yytext()));}
<YYINITIAL> {ELSE} { return (new Token(Token.ELSE,yytext()));}
<YYINITIAL> {IF} { return (new Token(Token.IF,yytext()));}
<YYINITIAL> {RETURN} { return (new Token(Token.RETURN,yytext()));}
<YYINITIAL> {ASTRISK} { return (new Token(Token.ASTRISK,yytext()));}
<YYINITIAL> {MINUS} { return (new Token(Token.MINUS,yytext()));}
<YYINITIAL> {FOR} { return (new Token(Token.FOR,yytext()));}
<YYINITIAL> {INCREMENT} { return (new Token(Token.INCREMENT,yytext()));}
<YYINITIAL> {CASE} { return (new Token(Token.CASE,yytext()));}
<YYINITIAL> {SWITCH} { return (new Token(Token.SWITCH,yytext()));}
<YYINITIAL> {DEFAULT} { return (new Token(Token.DEFAULT,yytext()));}
<YYINITIAL> {VAR} { return (new Token(Token.VAR,yytext()));}
<YYINITIAL> {REL_OP} { return (new Token(Token.REL_OP,yytext()));}
<YYINITIAL> {PLUS} { return (new Token(Token.PLUS,yytext()));}
<YYINITIAL> {EQUAL} { return (new Token(Token.EQUAL,yytext()));}
<YYINITIAL> {COLON} { return (new Token(Token.COLON,yytext()));}
<YYINITIAL> {OPEN_SQUARE} { return (new Token(Token.OPEN_SQUARE,yytext()));}
<YYINITIAL> {CLOSE_SQUARE} { return (new Token(Token.CLOSE_SQUARE,yytext()));}
<YYINITIAL> {COLON_EQUAL} { return (new Token(Token.COLON_EQUAL,yytext()));}
<YYINITIAL> {AND_OP} { return (new Token(Token.AND_OP,yytext()));}
<YYINITIAL> {OR_OP} { return (new Token(Token.OR_OP,yytext()));}
<YYINITIAL> {STRING_LIT} { return (new Token(Token.STRING_LIT,yytext()));}
<YYINITIAL> {Comma} { return (new Token(Token.COMMA,yytext()));}
<YYINITIAL> {IDENTIFIER} { return (new Token(Token.IDENTIFIER,yytext()));}
<YYINITIAL> {INT_LIT} { return (new Token(Token.INT_LIT,yytext()));}
<YYINITIAL> {SLASH} { return (new Token(Token.SLASH,yytext()));}
<YYINITIAL> {SEMI_COLON} { return (new Token(Token.SEMI_COLON,yytext()));}
<YYINITIAL> {comment} {}



<YYINITIAL> . {
  return new Token(Token.ERROR, "Invalid input: " + yytext() + " in line " + (yyline+1)) ;
}
